// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Post extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Post must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Post", id.toString(), this);
    }
  }

  static load(id: string): Post | null {
    return changetype<Post | null>(store.get("Post", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get postId(): BigInt {
    let value = this.get("postId");
    return value!.toBigInt();
  }

  set postId(value: BigInt) {
    this.set("postId", Value.fromBigInt(value));
  }

  get postImage(): string {
    let value = this.get("postImage");
    return value!.toString();
  }

  set postImage(value: string) {
    this.set("postImage", Value.fromString(value));
  }

  get caption(): string {
    let value = this.get("caption");
    return value!.toString();
  }

  set caption(value: string) {
    this.set("caption", Value.fromString(value));
  }

  get tags(): string {
    let value = this.get("tags");
    return value!.toString();
  }

  set tags(value: string) {
    this.set("tags", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class Comment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Comment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Comment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Comment", id.toString(), this);
    }
  }

  static load(id: string): Comment | null {
    return changetype<Comment | null>(store.get("Comment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get commentId(): BigInt {
    let value = this.get("commentId");
    return value!.toBigInt();
  }

  set commentId(value: BigInt) {
    this.set("commentId", Value.fromBigInt(value));
  }

  get relatedPostId(): BigInt {
    let value = this.get("relatedPostId");
    return value!.toBigInt();
  }

  set relatedPostId(value: BigInt) {
    this.set("relatedPostId", Value.fromBigInt(value));
  }

  get comment(): string {
    let value = this.get("comment");
    return value!.toString();
  }

  set comment(value: string) {
    this.set("comment", Value.fromString(value));
  }

  get commentDate(): string {
    let value = this.get("commentDate");
    return value!.toString();
  }

  set commentDate(value: string) {
    this.set("commentDate", Value.fromString(value));
  }

  get commentedUser(): Bytes {
    let value = this.get("commentedUser");
    return value!.toBytes();
  }

  set commentedUser(value: Bytes) {
    this.set("commentedUser", Value.fromBytes(value));
  }
}
